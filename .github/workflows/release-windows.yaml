name: Release Windows App

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Version tag"
        required: true
        default: "1.0.0"
  push:
    tags:
      - "v*" # 监听 v 开头的标签推送

jobs:
  release:
    name: Release Windows App
    runs-on: windows-latest
    strategy:
      matrix:
        platform:
          - windows/amd64
          #- windows/arm64
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Normalise platform tag
        id: normalise_platform
        shell: bash
        run: |
          tag=$(echo ${{ matrix.platform }} | sed -e 's/\//_/g' -e 's/amd64/x64/g')
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Normalise platform name
        id: normalise_platform_name
        shell: bash
        run: |
          pname=$(echo "${{ matrix.platform }}" | sed 's/windows\///g')
          echo "pname=$pname" >> "$GITHUB_OUTPUT"

      - name: Normalise version tag
        id: normalise_version
        shell: bash
        run: |
          if [ -n "${{ github.event.release.tag_name }}" ]; then
            version=$(echo "${{ github.event.release.tag_name }}" | sed -e 's/^v//')
          elif [ -n "${{ github.event.inputs.tag }}" ]; then
            version=$(echo "${{ github.event.inputs.tag }}" | sed -e 's/^v//')
          else
            version=$(echo "${GITHUB_REF##*/}" | sed -e 's/^v//')
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "Generated version: $version"

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Install chocolatey
        uses: crazy-max/ghaction-chocolatey@v2
        with:
          args: install nsis jq

      - name: Install wails
        shell: bash
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.11.0

      - name: Install pnpm
        run: npm install -g pnpm@10.12.1

      - name: Update version in JSON files
        shell: pwsh
        run: |
          jq --arg ver "${{ steps.normalise_version.outputs.version }}" '.info.productVersion = $ver' wails.json > tmp.json
          Move-Item -Force tmp.json wails.json

          jq --arg ver "${{ steps.normalise_version.outputs.version }}" '.version = $ver' frontend/package.json > tmp.json
          Move-Item -Force tmp.json frontend/package.json

      - name: Build frontend assets
        working-directory: frontend
        run: |
          pnpm install
          pnpm run build

      - name: Build Windows portable app
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -s -clean -platform ${{ matrix.platform }} \
          -webview2 embed \
          -ldflags "-X main.version=v${{ steps.normalise_version.outputs.version }} -X main.gaMeasurementID=${{ secrets.GA_MEASUREMENT_ID }} -X main.gaSecretKey=${{ secrets.WINDOWS_GA_SECRET }}"

      - name: Compress portable binary
        working-directory: ./build/bin
        run: Compress-Archive "DevTools.exe" "DevTools_Portable_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.zip"

      - name: Upload release asset (Portable)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.normalise_version.outputs.version }}
          files: ./build/bin/DevTools_Portable_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Windows NSIS installer
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -s -clean -platform ${{ matrix.platform }} \
          -nsis -webview2 embed \
          -ldflags "-X main.version=v${{ steps.normalise_version.outputs.version }}"

      #      - name: Codesign Windows NSIS installer
      #        shell: powershell
      #        working-directory: ./build/bin
      #        run: |
      #          echo "Creating certificate file"
      #          New-Item -ItemType Directory -Path certificate -Force | Out-Null
      #          Set-Content -Path certificate\certificate.txt -Value '${{ secrets.WIN_SIGNING_CERT }}'
      #
      #          echo "Decoding PFX certificate"
      #          certutil -f -decode certificate\certificate.txt certificate\certificate.pfx
      #
      #          echo "Importing certificate to trust store"
      #          $pfxPassword = ConvertTo-SecureString -String '${{ secrets.WIN_SIGNING_CERT_PASSWORD }}' -AsPlainText -Force
      #          Import-PfxCertificate -FilePath certificate\certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password $pfxPassword
      #
      #          echo "Signing DevTools installer"
      #          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign `
      #            /fd sha256 `
      #            /tr http://timestamp.digicert.com `
      #            /f certificate\certificate.pfx `
      #            /p '${{ secrets.WIN_SIGNING_CERT_PASSWORD }}' `
      #            DevTools-${{ steps.normalise_platform_name.outputs.pname }}-installer.exe

      - name: Rename installer
        working-directory: ./build/bin
        run: Rename-Item -Path "DevTools-${{ steps.normalise_platform_name.outputs.pname }}-installer.exe" -NewName "DevTools_Setup_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.exe"

      - name: Upload release asset (Installer)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.normalise_version.outputs.version }}
          files: ./build/bin/DevTools_Setup_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.exe
          token: ${{ secrets.GITHUB_TOKEN }}
